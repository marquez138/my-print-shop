// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Example base models; we'll extend with Design later
model Customer {
  id               String   @id @default(cuid())
  clerkUserId      String   @unique
  email            String   @unique
  name             String?
  stripeCustomerId String?  @unique
  role             Role     @default(CUSTOMER)
  orders           Order[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Order {
  id                    String      @id @default(cuid())
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  email                 String?
  total                 Int
  currency              String      @default("usd")
  status                String      @default("AWAITING_PAYMENT")
  stripePaymentIntentId String?     @unique
  stripeChargeId        String?     @unique
  customerId            String?
  customer              Customer?   @relation(fields: [customerId], references: [id])
  items                 OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  name      String
  sku       String
  qty       Int
  unitPrice Int
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
}

enum Role {
  CUSTOMER
  ADMIN
}

// ---------- New for My-Print-Shop ----------

enum PrintSide {
  front
  back
  sleeve
}

 model Design {
  id          String   @id @default(cuid())
  userId      String?
  anonymousId String?

  productId   String
  variantSku  String        // e.g. "unisex-tee-black-xl"
  color       String?       // üëà store the selected color id (e.g. "black")

  status      String   @default("draft") // draft | submitted | changes_requested | approved | ordered

  // pricing in cents
  pricingBase  Int
  pricingFees  Int
  pricingTotal Int

  // optional per-side preview URLs
  previewFront String?
  previewBack  String?
  previewLeft  String?
  previewRight String?

  // frozen spec used by production (coords, size, DPI, color mode, etc.)
  printSpec    Json

  placements   DesignPlacement[]
  comments     DesignComment[]  // back-relation to DesignComment.design

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([productId, color])
  @@index([status])
}

model DesignComment {
  id        String   @id @default(cuid())
  designId  String
  design    Design   @relation(fields: [designId], references: [id], onDelete: Cascade)
  author    String // "admin" | "user"
  body      String
  createdAt DateTime @default(now())

  @@index([designId, createdAt])
}

model DesignPlacement {
  id String @id @default(cuid())

  designId String
  design   Design @relation(fields: [designId], references: [id], onDelete: Cascade)

  // one placement per side (e.g., left chest OR full front) ‚Äî enforced below
  side PrintSide

  // ID of the area as defined in your `/config/print-areas.ts` (e.g., "leftChest")
  areaId String

  // Cloudinary asset info
  assetId String // public_id
  url     String // secure_url

  // Transform relative to the safe-zone; we keep defaults to ‚Äútop‚Äù alignment
  x        Float @default(0) // 0..1 (left)
  y        Float @default(0) // 0..1 (top)
  scale    Float @default(1)
  rotation Float @default(0)

  widthPx  Int // original asset size
  heightPx Int
  dpi      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üîí Enforce exactly one placement per side for a given design
  @@unique([designId, side], name: "designId_side")
}
